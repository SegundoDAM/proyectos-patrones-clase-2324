package profesor01;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;

/**
 * State pattern:We have a specific class(Context) that manages the state
 * changes of a external class by creating different instance depending on the
 * state you want to adopt. Every class that you create implements an
 * interface(State) that define the method name that they have to implement
 * 
 */

public class StatePattern {
	public void main(String args[]) {
		try {
			State state;
			Context context = new Context(this);
			SocketChannel socketChannel = null;
			// -----------------------------\\
			// OPEN/LISTENING SOCKET \\
			// -----------------------------\\
			// First State:
			state = new ConnectSocketState(socketChannel);
			context.setState(state);
			socketChannel = context.request();
			// -----------------------------\\
			// CLOSE SOCKET \\
			// -----------------------------\\
			// Second State:
			state = new CloseSocketState(socketChannel);
			context.setState(state);
			socketChannel = context.request();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public interface State {
		SocketChannel processState();
	}

	public class ConnectSocketState implements State {
		SocketChannel socketChannel;

		public ConnectSocketState(SocketChannel socketChannel) {
			this.socketChannel = socketChannel;
		}

		public SocketChannel processState() {
			try {
				int port = 21;
				InetAddress host = InetAddress.getByName("192.168.1.1");
				SocketAddress adress = new InetSocketAddress(host, port);
				socketChannel = SocketChannel.open(adress);
				socketChannel.configureBlocking(true);
			} catch (IOException e) {
				e.printStackTrace();
			}
			return socketChannel;
		}
	}

	public class CloseSocketState implements State {
		SocketChannel socketChannel;

		public CloseSocketState(SocketChannel socketChannel) {
			this.socketChannel = socketChannel;
		}

		public SocketChannel processState() {
			try {
				socketChannel.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return socketChannel;
		}
	}

}
